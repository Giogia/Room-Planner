{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/three/build/three.module.js from dll-reference vendor","webpack:///./test/stub_dom.js","webpack:///external \"vendor\"","webpack:///./src/three-map-controls.js","webpack:///./src/demo.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","console","log","document","body","clientWidth","clientHeight","addEventListener","removeEventListener","vendor","__webpack_exports__","three__WEBPACK_IMPORTED_MODULE_0__","window","require","MapControls","EventDispatcher","constructor","camera","domElement","options","super","this","undefined","enabled","target","minDistance","maxDistance","enableZoom","zoomSpeed","zoomDampingAlpha","initialZoom","enablePan","keyPanSpeed","panDampingAlpha","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ZOOM","MOUSE","MIDDLE","PAN","assign","isTargetValid","mode","Error","normal","constant","center","radius","target0","clone","position0","position","zoom0","zoom","_changeEvent","type","_startEvent","_endEvent","_STATES","NONE","DOLLY","TOUCH_DOLLY","TOUCH_PAN","_init","distanceToPoint","_state","_mouse","Vector2","_finalTargetDistance","_currentTargetDistance","_panTarget","Vector3","_panCurrent","_minZoomPosition","_maxZoomPosition","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_camOrientation","_zoomAlpha","_screenWorldXform","Math","tan","fov","PI","_straightDollyTrack","lerpVectors","abs","res","_intersectCameraTarget","lookAt","intersection","ray","direction","normalize","_updateZoomAlpha","_onContextMenu","bind","_onMouseDown","_onMouseWheel","_onTouchStart","_onTouchEnd","_onTouchMove","_onKeyDown","update","coplanar","projectPoint","Ray","subVectors","intersectPlane","intersectSphere","_updateDollyTrack","getZoomAlpha","reset","copy","updateProjectionMatrix","dispatchEvent","panDelta","oldPanCurrent","lerp","add","v","quat","Quaternion","setFromAxisAngle","setFromMatrixColumn","matrix","x","applyQuaternion","y","dispose","_onMouseMove","_onMouseUp","zoomToFit","mesh","width","height","geometry","boundingSphere","localToWorld","vFOV","hFOV","atan","aspect","obj_aspect","targetAreaVisible","bbox","vOffset","hOffset","depth","distanceToPlane","Box2","cam_pos","cam_xpos","z","halfPi","angleTo","length","min","cos","forEach","_mm","max","diff","damping_alpha","round","intersect","addVectors","multiplyScalar","_calculateMinZoom","sub","_getZoomScale","pow","_panLeft","distance","cameraMatrix","set","_panUp","_pan","deltaX","deltaY","targetDistance","element","camToTarget","_dollyIn","dollyScale","_cameraOfKnownType","warn","_dollyOut","_handleUpdateDollyTrackMouse","event","prevMouse","offsetX","offsetY","equals","rc","Raycaster","setFromCamera","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseUp","map_intersect","_handleMouseWheel","delta","wheelDelta","detail","_handleKeyDown","keyCode","_handleUpdateDollyTrackTouch","centerpoint","dx","touches","pageX","dy","pageY","mouse","_handleTouchStartDolly","sqrt","_handleTouchStartPan","_handleTouchMoveDolly","_handleTouchMovePan","_handleTouchEnd","preventDefault","button","stopPropagation","THREE","default","SPHERE_RADIUS","demo","container","scene","Scene","renderer","meshes","dims","selectedObject","controls","debugCamViewInterval","camViewMesh","camViewLines","init","setMode","animate","links","sphere","getElementById","plane","style","display","concat","_m","remove","initSphere","initPlane","PerspectiveCamera","innerWidth","innerHeight","Sphere","colors","SphereBufferGeometry","computeBoundingSphere","vertices","getAttribute","array","color","Color","vert","setRGB","push","g","b","addAttribute","Float32BufferAttribute","Float32Array","from","points","Points","PointsMaterial","size","vertexColors","VertexColors","polys","Mesh","MeshBasicMaterial","transparent","opacity","lines","wireframe","toggleDebugCamView","e","checked","clearInterval","setInterval","phidelta","PlaneBufferGeometry","side","DoubleSide","Plane","CubeGeometry","material","MeshNormalMaterial","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","onWindowResize","_e","pick","zoomTo","clientX","clientY","raycaster","intersects","intersectObjects","children","requestAnimationFrame","rotation","render"],"mappings":"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","file":"demo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = (__webpack_require__(2))(0);","module.exports = {\n    console: {\n        log: function () {}\n    },\n    document: {\n        body: {\n            clientWidth: 1920,\n            clientHeight: 1080,\n            addEventListener: function () {},\n            removeEventListener: function () {}\n        }\n    }\n};\n","module.exports = vendor;","'use strict';\n\n//Alex Pilafian 2016-2019 - sikanrong@gmail.com\n\nimport {Box2, Quaternion, EventDispatcher, Vector2, Vector3, Raycaster, Ray, MOUSE} from 'three'\n\n//test stubs\nif(typeof window == 'undefined'){\n    let window = require('../test/stub_dom');\n}\n\nclass MapControls extends EventDispatcher{\n\n        constructor(camera, domElement, options){\n            super();\n\n            this.camera = camera;\n\n            //Object to use for listening for keyboard/mouse events\n            this.domElement = ( domElement !== undefined ) ? domElement : window.document.body;\n\n            // Set to false to disable this control (Disables all input events)\n            this.enabled = true;\n\n            // Must be set to instance of Plane or Sphere\n            this.target;\n\n            // How far you can dolly in and out\n            this.minDistance = 1; //probably should never be 0\n            this.maxDistance = 100;\n\n            // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n            // Set to false to disable zooming\n            this.enableZoom = true;\n            this.zoomSpeed = 6.0;\n            this.zoomDampingAlpha = 0.1;\n            this.initialZoom = 0; //start zoomed all the way out unless set in options.\n\n            // Set to false to disable panning\n            this.enablePan = true;\n            this.keyPanSpeed = 12.0;\t// pixels moved per arrow key push\n            this.panDampingAlpha = 0.1;\n\n            // Set to false to disable use of the keys\n            this.enableKeys = true;\n\n            // The four arrow keys\n            this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n            // Mouse buttons\n            this.mouseButtons = { ZOOM: MOUSE.MIDDLE, PAN: MOUSE.LEFT };\n            \n            //Copy options from parameters\n            Object.assign(this, options);\n            let isTargetValid = false;\n\n            if(this.mode === undefined){\n                throw new Error('\\'mode\\' option must be set to either \\'plane\\' or \\'sphere\\'');\n            }\n\n            switch(this.mode){\n                case 'plane':\n                    isTargetValid = (this.target.normal !== undefined && this.target.constant !== undefined);\n                    break;\n                case 'sphere':\n                    isTargetValid = (this.target.center !== undefined && this.target.radius !== undefined);\n                    break;\n            }\n\n            if(!isTargetValid){\n                throw new Error('\\'target\\' option must be an instance of type THREE.Plane or THREE.Sphere');\n            }\n\n            // for reset\n            this.target0 = this.target.clone();\n            this.position0 = this.camera.position.clone();\n            this.zoom0 = this.camera.zoom;\n\n            this._changeEvent = { type: 'change' };\n            this._startEvent = { type: 'start' };\n            this._endEvent = { type: 'end' };\n\n            this._STATES = { NONE : - 1, DOLLY : 1, PAN : 2, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\n            this._init();\n        }\n\n        _init (){\n            if(this.target.distanceToPoint(this.camera.position) == 0){\n                throw new Error(\"ORIENTATION_UNKNOWABLE: initial Camera position cannot intersect target plane.\");\n            }\n\n            this._state = this._STATES.NONE;\n\n            this._mouse = new Vector2();\n\n            this._finalTargetDistance = 0;\n            this._currentTargetDistance = 0;\n\n            this._panTarget = new Vector3();\n            this._panCurrent = new Vector3();\n\n            this._minZoomPosition = new Vector3();\n            this._maxZoomPosition = new Vector3();\n\n            this._panStart = new Vector2();\n            this._panEnd = new Vector2();\n            this._panDelta = new Vector2();\n\n            this._dollyStart = new Vector2();\n            this._dollyEnd = new Vector2();\n            this._dollyDelta = new Vector2();\n\n            this._camOrientation = new Vector2();\n\n            this._zoomAlpha;\n\n            this._screenWorldXform = Math.tan( ( this.camera.fov / 2 ) * Math.PI / 180.0 );\n\n            //establish initial camera orientation based on position w.r.t. _this.target plane\n            this._straightDollyTrack();\n\n            this.camera.position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this.initialZoom);\n            this._finalTargetDistance = this._currentTargetDistance = Math.abs(this.target.distanceToPoint(this.camera.position));\n\n            const res = this._intersectCameraTarget();\n            this.camera.lookAt(res.intersection); //set the orientation of the camera towards the map.\n            this._camOrientation = res.ray.direction.clone().normalize();\n\n            this._updateZoomAlpha();\n\n            //Assign event listeners\n\n            this.domElement.addEventListener( 'contextmenu', this._onContextMenu.bind(this), false );\n\n            this.domElement.addEventListener( 'mousedown', this._onMouseDown.bind(this), false );\n            this.domElement.addEventListener( 'mousewheel', this._onMouseWheel.bind(this), false );\n            this.domElement.addEventListener( 'MozMousePixelScroll', this._onMouseWheel.bind(this), false ); // firefox\n\n            this.domElement.addEventListener( 'touchstart', this._onTouchStart.bind(this), false );\n            this.domElement.addEventListener( 'touchend', this._onTouchEnd.bind(this), false );\n            this.domElement.addEventListener( 'touchmove', this._onTouchMove.bind(this), false );\n\n            this.domElement.addEventListener( 'keydown', this._onKeyDown.bind(this), false );\n\n\n            this.update();\n        }\n\n        _intersectCameraTarget(){\n            let intersection = new Vector3();\n            let ray;\n\n            switch(this.mode){\n                case 'plane':\n                    const coplanar = new Vector3();\n                    this.target.projectPoint(this.camera.position, coplanar);\n                    ray = new Ray(this.camera.position, new Vector3().subVectors(coplanar, this.camera.position).normalize());\n                    ray.intersectPlane(this.target, intersection);\n                    break;\n                case 'sphere':\n                    ray = new Ray(this.camera.position, (new Vector3()).subVectors(this.target.center, this.camera.position).normalize());\n                    ray.intersectSphere(this.target, intersection);\n                    break;\n            }\n\n            return {\n                intersection: intersection,\n                ray: ray\n            }\n        }\n\n        _straightDollyTrack(){\n            this._updateDollyTrack(this._intersectCameraTarget().ray);\n        }\n\n        getZoomAlpha () {\n            return this._zoomAlpha;\n        }\n\n        reset () {\n\n            this.target.copy( this.target0 );\n            this.camera.position.copy( this.position0 );\n            this.camera.zoom = this.zoom0;\n\n            this.camera.updateProjectionMatrix();\n\n            this._init(); //reinit\n\n            this.dispatchEvent( this._changeEvent );\n\n            this.update();\n\n            this._state = this._STATES.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        update () {\n            var panDelta = new Vector3();\n            var oldPanCurrent = new Vector3();\n            var position = this.camera.position;\n\n            // move target to panned location\n            oldPanCurrent.copy(this._panCurrent);\n            this._panCurrent.lerp( this._panTarget, this.panDampingAlpha );\n            panDelta.subVectors(this._panCurrent, oldPanCurrent);\n\n            switch (this.mode) {\n                case 'plane':\n                    this._maxZoomPosition.add(panDelta);\n                    this._minZoomPosition.add(panDelta);\n                    break;\n                case 'sphere':\n                    const v = new Vector3();\n                    const quat = new Quaternion();\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 1 ), panDelta.x);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    quat.setFromAxisAngle(v.setFromMatrixColumn( this.camera.matrix, 0 ), panDelta.y);\n\n                    this._maxZoomPosition.applyQuaternion(quat);\n                    this._minZoomPosition.applyQuaternion(quat);\n\n                    break;\n            }\n\n            position.lerpVectors(this._minZoomPosition, this._maxZoomPosition, this._updateZoomAlpha());\n\n            if(this.mode == 'sphere'){\n                this.camera.lookAt(this.target.center);\n            }\n        }\n\n        dispose () {\n            this.domElement.removeEventListener( 'contextmenu', this._onContextMenu, false );\n            this.domElement.removeEventListener( 'mousedown', this._onMouseDown, false );\n            this.domElement.removeEventListener( 'mousewheel', this._onMouseWheel, false );\n            this.domElement.removeEventListener( 'MozMousePixelScroll', this._onMouseWheel, false ); // firefox\n\n            this.domElement.removeEventListener( 'touchstart', this._onTouchStart, false );\n            this.domElement.removeEventListener( 'touchend', this._onTouchEnd, false );\n            this.domElement.removeEventListener( 'touchmove', this._onTouchMove, false );\n\n            this.domElement.removeEventListener( 'mousemove', this._onMouseMove, false );\n            this.domElement.removeEventListener( 'mouseup', this._onMouseUp, false );\n\n            this.domElement.removeEventListener( 'keydown', this._onKeyDown, false );\n        };\n\n        zoomToFit (mesh, center, width, height){\n            //if only width is passed interpret it as radius and set height equal to width\n            center = center || mesh.geometry.boundingSphere.center;\n            width = width || (mesh.geometry.boundingSphere.radius * 2);\n\n            if(height === undefined)\n                height = width;\n\n            this._panTarget.copy(mesh.localToWorld(center.clone()));\n            this._panCurrent.copy(this._intersectCameraTarget().intersection);\n\n            this._straightDollyTrack();\n\n            var vFOV = this.camera.fov * (Math.PI / 180);\n            var hFOV = 2 * Math.atan( Math.tan( vFOV / 2 ) * this.camera.aspect );\n            var obj_aspect = width / height;\n\n            this._finalTargetDistance = ((((obj_aspect > this.camera.aspect)? width : height) / 2) / Math.tan(((obj_aspect > this.camera.aspect)? hFOV : vFOV) / 2));\n\n\n        };\n\n        //returns a bounding box denoting the visible target area\n        targetAreaVisible(){\n\n            let bbox, vOffset, hOffset, center;\n\n            switch(this.mode){\n                case 'plane':\n                    var ray = new Ray(this.camera.position, this._camOrientation);\n                    var depth = ray.distanceToPlane(this.target);\n\n                    center = this.camera.position.clone();\n\n                    vOffset = this._screenWorldXform * depth;\n                    hOffset = vOffset * this.camera.aspect;\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset, center.y - vOffset),\n                        new Vector2(center.x + hOffset, center.y + vOffset)\n                    );\n\n                    break;\n                case 'sphere':\n\n                    const cam_pos = ((new Vector3()).subVectors(this.target.center, this.camera.position));\n                    const cam_xpos = new Vector3(cam_pos.x, 0, cam_pos.z);\n\n                    const halfPi = Math.PI / 2;\n\n                    center = new Vector2(\n                        cam_xpos.angleTo(new Vector3(1,0,0)),\n                        cam_pos.angleTo(new Vector3(0,1,0))\n                    );\n\n                    center.x = (this.camera.position.z < 0)? (2*Math.PI - center.x) : center.x;\n\n                    const d = cam_pos.length();\n\n                    //Derived from solving the Haversine formula for Phi_2 when all other variables\n                    //(d, r, Theta_1, Theta_2, Phi_1) are given\n                    vOffset = this._screenWorldXform * ((d / this.target.radius) - 1);\n                    vOffset = Math.min(vOffset, halfPi);\n\n                    //Account for the aspect ratio of the screen, and the deformation of the sphere\n                    const r = this.target.radius * Math.cos(center.y - halfPi);\n                    hOffset = vOffset * this.camera.aspect * ( this.target.radius / r);\n                    hOffset = Math.min(hOffset, halfPi);\n\n                    bbox = new Box2(\n                        new Vector2(center.x - hOffset - halfPi, center.y - vOffset - halfPi),\n                        new Vector2(center.x + hOffset - halfPi, center.y + vOffset - halfPi)\n                    );\n\n                    ['min', 'max'].forEach(_mm => {\n                        bbox[_mm].x = (bbox[_mm].x > Math.PI)? (-2*Math.PI + bbox[_mm].x): bbox[_mm].x;\n                    });\n\n                    break;\n            };\n\n            return bbox;\n        }\n\n        _updateZoomAlpha(){\n            this._finalTargetDistance = Math.max( this.minDistance, Math.min( this.maxDistance, this._finalTargetDistance ) );\n            var diff = this._currentTargetDistance - this._finalTargetDistance;\n            var damping_alpha = this.zoomDampingAlpha;\n            this._currentTargetDistance -= diff * damping_alpha;\n            var rounding_places = 100000;\n            this._zoomAlpha = Math.abs(Math.round((1 - ((this._currentTargetDistance - this.minDistance) / (this.maxDistance - this.minDistance))) * rounding_places ) / rounding_places);\n\n            return this._zoomAlpha;\n        }\n\n        _updateDollyTrack(ray){\n            let intersect = new Vector3();\n\n            switch(this.mode){\n                case 'plane':\n                    ray.intersectPlane(this.target, intersect);\n                    break;\n                case 'sphere':\n                    ray.intersectSphere(this.target, intersect);\n                    break;\n            }\n\n            if(intersect){\n                this._maxZoomPosition.addVectors(intersect, new Vector3().subVectors(this.camera.position, intersect).normalize().multiplyScalar(this.minDistance));\n                this._minZoomPosition.copy(this._calculateMinZoom(this.camera.position, intersect));\n\n                this._finalTargetDistance = this._currentTargetDistance = intersect.clone().sub(this.camera.position).length();\n            }\n        }\n\n        _getZoomScale() {\n            return Math.pow( 0.95, this.zoomSpeed );\n        }\n\n\n        _panLeft( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(- distance, 0, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 0 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( - distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        _panUp ( distance, cameraMatrix ) {\n            var v = new Vector3();\n\n            switch(this.mode){\n                case 'sphere':\n                    v.set(0, - distance, 0);\n                    break;\n                case 'plane':\n                    v.setFromMatrixColumn( cameraMatrix, 1 ); // get Y column of cameraMatrix\n                    v.multiplyScalar( distance );\n                    break;\n            }\n\n            this._panTarget.add( v );\n        }\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        _pan (deltaX, deltaY) {\n            var element = this.domElement;\n\n            var r = new Ray(this.camera.position, this._camOrientation);\n            var targetDistance;\n\n            switch(this.mode){\n                case 'plane':\n                    targetDistance = this._screenWorldXform * r.distanceToPlane(this.target);\n                    break;\n                case 'sphere':\n                    //in spherical mode the pan coords are saved as radians and used as rotation angles\n                    const camToTarget = (new Vector3()).subVectors(this.camera.position, this.target.center);\n                    targetDistance = this._screenWorldXform * ((camToTarget.length() / this.target.radius) - 1);\n                    break;\n            }\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.camera.matrix );\n            this._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.camera.matrix );\n\n        }\n\n        _dollyIn( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance /= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _dollyOut( dollyScale ) {\n            if ( this._cameraOfKnownType() ) {\n                this._finalTargetDistance *= dollyScale;\n            } else {\n                console.warn( 'WARNING: MapControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                this.enableZoom = false;\n            }\n        }\n\n        _cameraOfKnownType() {\n            return this.camera.type === 'PerspectiveCamera'\n        }\n\n        _handleUpdateDollyTrackMouse(event){\n            var prevMouse = this._mouse.clone();\n            this._mouse.set(( event.offsetX / this.domElement.clientWidth ) * 2 - 1, - ( event.offsetY / this.domElement.clientHeight ) * 2 + 1);\n\n            if(!prevMouse.equals(this._mouse)){\n                var rc = new Raycaster();\n                rc.setFromCamera(this._mouse, this.camera);\n                this._updateDollyTrack(rc.ray);\n            }\n        }\n\n        _handleMouseDownDolly( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n            this._dollyStart.set( event.offsetX, event.offsetY );\n        }\n\n        _handleMouseDownPan( event ) {\n\n            this._panStart.set( event.offsetX, event.offsetY );\n\n        }\n\n        _handleMouseMoveDolly( event ) {\n\n            this._handleUpdateDollyTrackMouse(event);\n\n            //console.log( 'handleMouseMoveDolly' );\n\n            this._dollyEnd.set( event.offsetX, event.offsetY );\n\n            this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseMovePan( event ) {\n\n            //console.log( 'handleMouseMovePan' );\n\n            this._panEnd.set( event.offsetX, event.offsetY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleMouseUp( event ) {\n\n            //console.log( 'handleMouseUp' );\n\n        }\n\n        _calculateMinZoom(cam_pos, map_intersect){\n            return map_intersect.clone().add(\n                cam_pos.clone()\n                .sub(map_intersect)\n                .normalize()\n                .multiplyScalar(this.maxDistance)\n            );\n        }\n\n\n        _handleMouseWheel( event ) {\n            this._handleUpdateDollyTrackMouse(event);\n\n            var delta = 0;\n\n            if ( event.wheelDelta !== undefined ) {\n\n                // WebKit / Opera / Explorer 9\n\n                delta = event.wheelDelta;\n\n            } else if ( event.detail !== undefined ) {\n\n                // Firefox\n\n                delta = - event.detail;\n\n            }\n\n            if ( delta > 0 ) {\n                this._dollyOut( this._getZoomScale() );\n            } else if ( delta < 0 ) {\n                this._dollyIn( this._getZoomScale() );\n            }\n\n            this.update();\n        }\n\n        _handleKeyDown( event ) {\n\n            //console.log( 'handleKeyDown' );\n\n            switch ( event.keyCode ) {\n\n                case this.keys.UP:\n                    this._pan( 0, this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.BOTTOM:\n                    this._pan( 0, - this.keyPanSpeed );\n                    this.update();\n                    break;\n\n                case this.keys.LEFT:\n                    this._pan( this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n                case this.keys.RIGHT:\n                    this._pan( - this.keyPanSpeed, 0 );\n                    this.update();\n                    break;\n\n            }\n        }\n\n        _handleUpdateDollyTrackTouch( event ){\n            var centerpoint = new Vector2();\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            centerpoint.x = event.touches[ 0 ].pageX + (dx / 2);\n            centerpoint.y = event.touches[ 0 ].pageY + (dy / 2);\n\n            var mouse = new Vector2();\n            mouse.x = ( centerpoint.x / domElement.clientWidth ) * 2 - 1;\n            mouse.y = - ( centerpoint.y / domElement.clientHeight ) * 2 + 1;\n\n            this._updateDollyTrack(mouse);\n        }\n\n        _handleTouchStartDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyStart.set( 0, distance );\n\n        }\n\n        _handleTouchStartPan( event ) {\n\n            //console.log( 'handleTouchStartPan' );\n\n            this._panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n        }\n\n\n        _handleTouchMoveDolly( event ) {\n            this._handleUpdateDollyTrackTouch(event);\n\n            //console.log( 'handleTouchMoveDolly' );\n\n            var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n            var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n            var distance = Math.sqrt( dx * dx + dy * dy );\n\n            this._dollyEnd.set( 0, distance );\n\n            this._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n            if ( this._dollyDelta.y > 0 ) {\n\n                this._dollyOut( this._getZoomScale() );\n\n            } else if ( this._dollyDelta.y < 0 ) {\n\n                this._dollyIn( this._getZoomScale() );\n\n            }\n\n            this._dollyStart.copy( this._dollyEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchMovePan( event ) {\n\n            this._panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n            this._panDelta.subVectors( this._panEnd, this._panStart );\n\n            this._pan( this._panDelta.x, this._panDelta.y );\n\n            this._panStart.copy( this._panEnd );\n\n            this.update();\n\n        }\n\n        _handleTouchEnd( event ) {\n            //console.log( 'handleTouchEnd' );\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        _onMouseDown( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( event.button === this.mouseButtons.ZOOM ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseDownDolly( event );\n\n                this._state = this._STATES.DOLLY;\n\n            } else if ( event.button === this.mouseButtons.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseDownPan( event );\n\n                this._state = this._STATES.PAN;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.domElement.addEventListener( 'mousemove', this._onMouseMove.bind(this), false );\n                this.domElement.addEventListener( 'mouseup', this._onMouseUp.bind(this), false );\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onMouseMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n\n            if ( this._state === this._STATES.DOLLY ) {\n\n                if ( this.enableZoom === false ) return;\n\n                this._handleMouseMoveDolly( event );\n\n            } else if ( this._state === this._STATES.PAN ) {\n\n                if ( this.enablePan === false ) return;\n\n                this._handleMouseMovePan( event );\n            }\n        }\n\n        _onMouseUp( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleMouseUp( event );\n\n            this.domElement.removeEventListener( 'mousemove', this._onMouseMove, false );\n            this.domElement.removeEventListener( 'mouseup', this._onMouseUp, false );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onMouseWheel( event ) {\n            if ( this.enabled === false || this.enableZoom === false || ( this._state !== this._STATES.NONE ) ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._handleMouseWheel( event );\n\n            this.dispatchEvent( this._startEvent ); // not sure why these are here...\n            this.dispatchEvent( this._endEvent );\n\n        }\n\n        _onKeyDown( event ) {\n\n            if ( this.enabled === false || this.enableKeys === false || this.enablePan === false ) return;\n\n            this._handleKeyDown( event );\n\n        }\n\n        _onTouchStart( event ) {\n\n            if ( this.enabled === false ) return;\n\n            switch ( event.touches.length ) {\n                case 1: // three-fingered touch: pan\n\n                    if ( this.enablePan === false ) return;\n\n                    this._handleTouchStartPan( event );\n\n                    this._state = this._STATES.TOUCH_PAN;\n\n                    break;\n\n                case 2:\t// two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n\n                    this._handleTouchStartDolly( event );\n\n                    this._state = this._STATES.TOUCH_DOLLY;\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n            if ( this._state !== this._STATES.NONE ) {\n\n                this.dispatchEvent( this._startEvent );\n\n            }\n\n        }\n\n        _onTouchMove( event ) {\n\n            if ( this.enabled === false ) return;\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            switch ( event.touches.length ) {\n\n                case 1: // one-fingered touch: pan\n                    if ( this.enablePan === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_PAN ) return; // is this needed?...\n\n                    this._handleTouchMovePan( event );\n\n                    break;\n\n                case 2: // two-fingered touch: dolly\n\n                    if ( this.enableZoom === false ) return;\n                    if ( this._state !== this._STATES.TOUCH_DOLLY ) return; // is this needed?...\n\n                    this._handleTouchMoveDolly( event );\n\n                    break;\n\n                default:\n\n                    this._state = this._STATES.NONE;\n\n            }\n\n        }\n\n        _onTouchEnd( event ) {\n\n            if ( this.enabled === false ) return;\n\n            this._handleTouchEnd( event );\n\n            this.dispatchEvent( this._endEvent );\n\n            this._state = this._STATES.NONE;\n\n        }\n\n        _onContextMenu( event ) {\n            event.preventDefault();\n        }\n\n};\n\nexport default MapControls;\n","var THREE = require('three');\nvar MapControls = require('./three-map-controls.js').default || THREE.MapControls;\n\nconst SPHERE_RADIUS = 10;\n\nclass MapControlsDemo {\n    constructor (mode) {\n        this.container = document.body;\n        this.scene = new THREE.Scene();\n        this.renderer = null;\n        this.meshes = [];\n        this.dims = 10;\n        this.selectedObject = null;\n        this.controls;\n        this.mode;\n\n        this.debugCamViewInterval;\n\n        this.camViewMesh;\n        this.camViewLines;\n\n        this.init();\n        this.setMode(mode);\n        this.animate();\n    }\n\n    setMode(mode) {\n        this.mode = mode;\n        const links = {\n            sphere: document.getElementById('sphere-link'),\n            plane: document.getElementById('plane-link')\n        };\n\n        links[this.mode].style.display = 'none';\n        links[(this.mode == 'plane')? 'sphere' : 'plane'].style.display = 'inline-block';\n\n        this.meshes.concat([this.camViewLines, this.camViewMesh]).forEach((_m) => {\n            if(_m === undefined){\n                return;\n            }\n\n            this.scene.remove(_m);\n            _m.geometry.dispose();\n        });\n\n        this.camViewLines = this.camViewMesh = undefined;\n\n        switch(this.mode){\n            case 'sphere':\n                this.initSphere();\n                break;\n            case 'plane':\n                this.initPlane();\n                break;\n        }\n    }\n\n    initSphere(){\n\n        var camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.z = 40;\n        this.controls = new MapControls( camera, this.renderer.domElement, {\n            target: new THREE.Sphere(new THREE.Vector3(0,0,0), SPHERE_RADIUS),\n            mode: 'sphere',\n            minDistance: 1,\n            maxDistance: camera.position.z\n        });\n\n        const colors = [];\n\n        const geometry = new THREE.SphereBufferGeometry(SPHERE_RADIUS, this.dims, this.dims);\n        geometry.computeBoundingSphere();\n\n        const vertices = geometry.getAttribute('position').array;\n        for(var i = 0; i < vertices.length; i += 3){\n            var color = new THREE.Color();\n            var vert = new THREE.Vector3(vertices[i], vertices[i+1], vertices[i+2]);\n\n            color.setRGB(\n                ( vert.x / SPHERE_RADIUS ) + 0.5,\n                ( vert.y / SPHERE_RADIUS ) + 0.5,\n                ( vert.z / SPHERE_RADIUS ) + 0.5\n            );\n\n            colors.push( color.r, color.g, color.b );\n        }\n\n        geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( Float32Array.from(colors), 3 ) );\n\n        const points = new THREE.Points(\n            geometry,\n            new THREE.PointsMaterial( { size: 1, vertexColors: THREE.VertexColors } )\n        );\n\n        this.scene.add( points );\n        this.meshes.push( points );\n\n        const polys = new THREE.Mesh(\n            geometry,\n            new THREE.MeshBasicMaterial({\n                vertexColors: THREE.VertexColors,\n                transparent: true,\n                opacity: 0.2\n\n            })\n        );\n\n        this.meshes.push( polys );\n        this.scene.add( polys );\n\n        const lines = new THREE.Mesh(\n            geometry,\n            new THREE.MeshBasicMaterial({\n                vertexColors: THREE.VertexColors,\n                wireframe: true\n            })\n        );\n\n        this.meshes.push( lines );\n        this.scene.add( lines );\n\n    }\n\n    toggleDebugCamView(e){\n        if(!e.target.checked){\n            clearInterval(this.debugCamViewInterval);\n            this.scene.remove( this.camViewMesh );\n            this.scene.remove( this.camViewLines );\n            this.camViewMesh.geometry.dispose();\n            this.camViewLines.geometry.dispose();\n            this.camViewLines = this.camViewMesh = undefined;\n            return true;\n        }\n\n        this.debugCamViewInterval = setInterval(() => {\n            const bbox = this.controls.targetAreaVisible();\n            console.log(`${bbox.min.x}, ${bbox.min.y}, ${bbox.max.x}, ${bbox.max.y}`);\n\n            let geometry, position;\n            position = new THREE.Vector3(0,0,0);\n\n            switch (this.mode) {\n                case 'sphere':\n                    let phidelta = Math.abs(bbox.max.x - bbox.min.x);\n                    if(phidelta > Math.PI){\n                        phidelta = Math.abs((bbox.max.x + Math.PI*2) - bbox.min.x);\n                    }\n                    geometry = new THREE.SphereBufferGeometry(SPHERE_RADIUS, this.dims, this.dims,\n                        bbox.min.x + Math.PI/2, //phistart\n                        phidelta, //philength\n                        -bbox.max.y + Math.PI/2, //thetastart\n                        Math.abs(bbox.max.y - bbox.min.y) //thetalength\n                    );\n                    break;\n                case 'plane':\n\n                    geometry = new THREE.PlaneBufferGeometry(\n                        (bbox.max.x - bbox.min.x),\n                        (bbox.max.y - bbox.min.y),\n                        this.dims, this.dims\n                    );\n\n                    position.copy(this.controls.camera.position);\n                    position.z = 0;\n\n                    break;\n            }\n\n            if(this.camViewMesh == undefined){\n                this.camViewMesh = new THREE.Mesh(\n                    geometry,\n                    new THREE.MeshBasicMaterial({\n                        color: new THREE.Color(255, 0, 0),\n                        side: THREE.DoubleSide,\n                        transparent: true,\n                        opacity: 0.5\n                    })\n                );\n\n                this.camViewLines = new THREE.Mesh(\n                    geometry,\n                    new THREE.MeshBasicMaterial({\n                        color: new THREE.Color(255, 0, 0),\n                        wireframe: true\n                    })\n                );\n\n                this.scene.add( this.camViewMesh );\n                this.scene.add( this.camViewLines );\n            }else{\n\n                this.camViewMesh.geometry.copy(geometry);\n                this.camViewLines.geometry.copy(geometry);\n\n                geometry.dispose();\n            }\n\n            this.camViewMesh.geometry.computeBoundingSphere();\n            this.camViewMesh.position.copy(position);\n            this.camViewLines.position.copy(position);\n\n        }, 1000);\n    }\n\n    initPlane(){\n\n        var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.z = 20;\n        this.controls = new MapControls( camera, this.renderer.domElement, {\n            target: new THREE.Plane(new THREE.Vector3(0,0,1), 0),\n            mode: 'plane',\n            minDistance: 2.0,\n            maxDistance: 20\n        });\n\n        var offset = 3;\n\n        for(var x = 0; x < this.dims; x++){\n            for(var y = 0; y < this.dims; y++){\n                var geometry = new THREE.CubeGeometry(1, 1, 1);\n                var material = new THREE.MeshNormalMaterial();\n\n                var mesh = new THREE.Mesh( geometry, material );\n                mesh.position.x += ((-0.5 * this.dims * offset) + (x * offset));\n                mesh.position.y += ((-0.5 * this.dims * offset) + (y * offset));\n\n                this.meshes.push( mesh );\n                this.scene.add( mesh );\n\n                mesh.geometry.computeBoundingSphere();\n            }\n        }\n    }\n\n    init () {\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setPixelRatio( window.devicePixelRatio );\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n\n        this.container.appendChild( this.renderer.domElement );\n\n        window.addEventListener( 'resize', ()=>{\n            this.onWindowResize();\n        }, false );\n\n        this.renderer.domElement.addEventListener( 'mousedown', (_e) => {this.pick(_e)} );\n        this.renderer.domElement.addEventListener( 'dblclick', (_e) => {this.zoomTo(_e)} );\n\n        const cb = document.getElementById('toggleCamDebug');\n        cb.addEventListener('click', this.toggleDebugCamView.bind(this));\n    }\n\n    zoomTo(){\n        if(!this.selectedObject)\n            return;\n\n        this.controls.zoomToFit(this.selectedObject);\n    }\n\n    pick(event){\n        var mouse = new THREE.Vector2();\n\n        mouse.x = ( event.clientX / this.renderer.domElement.clientWidth ) * 2 - 1;\n        mouse.y = - ( event.clientY / this.renderer.domElement.clientHeight ) * 2 + 1;\n\n        var raycaster = new THREE.Raycaster();\n\n        raycaster.setFromCamera(mouse, this.controls.camera);\n\n        // calculate objects intersecting the picking ray\n        var intersects = raycaster.intersectObjects( this.scene.children, true );\n        if(intersects.length > 0){\n            this.selectedObject = intersects[0].object;\n        }else{\n            this.selectedObject = null;\n        }\n\n    }\n\n    onWindowResize(){\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.controls.camera.aspect = this.renderer.domElement.clientWidth / this.renderer.domElement.clientHeight;\n        this.controls.camera.updateProjectionMatrix();\n        this.renderer.setSize( this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight );\n    }\n\n    animate(){\n        requestAnimationFrame( () => {\n            this.animate();\n        } );\n\n        if(this.mode == 'plane'){\n            this.meshes.forEach(( mesh ) => {\n                mesh.rotation.x += 0.005;\n                mesh.rotation.y += 0.01;\n            });\n        }\n\n        this.controls.update();\n        this.renderer.render( this.scene, this.controls.camera );\n    }\n};\n\nwindow.addEventListener('load', () => {\n    window.demo = new MapControlsDemo('sphere');\n});"],"sourceRoot":""}