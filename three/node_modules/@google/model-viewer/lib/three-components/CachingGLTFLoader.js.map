{"version":3,"file":"CachingGLTFLoader.js","sourceRoot":"","sources":["../../src/three-components/CachingGLTFLoader.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,0CAA0C,CAAC;AAEpE,OAAO,EAAC,SAAS,EAAO,MAAM,iBAAiB,CAAC;AAIhD,MAAM,CAAC,MAAM,cAAc,GACvB,CAAC,GAAW,EACX,MAAW,EACX,mBAAqC,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;IAChD,MAAM,UAAU,GAAG,CAAC,KAAoB,EAAE,EAAE;QAC1C,gBAAiB,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC;IACF,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAA;AAEL,MAAM,KAAK,GAAG,IAAI,GAAG,EAAyB,CAAC;AAC/C,MAAM,SAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;AAE7C,MAAM,OAAO,iBAAiB;IAA9B;QAqBY,WAAM,GAAe,IAAI,UAAU,EAAE,CAAC;IAuClD,CAAC;IA3DC,MAAM,KAAK,KAAK;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,CAAC,UAAU;QACf,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,SAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,GAAW;QACpB,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,kBAAkB,CAAC,GAAW;QACnC,OAAO,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAID;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,mBAAqC,GAAG,EAAE,GAAE,CAAC;QACtE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACnB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,QAAgB,EAAE,EAAE;gBACzD,gBAAgB,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC,CAAC;SACf;QAED,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAErB,IAAI,gBAAgB,EAAE;YACpB,gBAAgB,CAAC,GAAG,CAAC,CAAC;SACvB;QAED,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,GAAW,EAAE,mBAAqC,GAAG,EAAE,GAAE,CAAC;QACnE,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAE1C,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAE7C,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,KAAK,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAE,kBAAkB;SACjE;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["/*\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {cloneGltf, Gltf} from './ModelUtils.js';\n\nexport type ProgressCallback = (progress: number) => void;\n\nexport const loadWithLoader =\n    (url: string,\n     loader: any,\n     progressCallback: ProgressCallback = () => {}) => {\n      const onProgress = (event: ProgressEvent) => {\n        progressCallback!(event.loaded / event.total);\n      };\n      return new Promise<Gltf>((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n      });\n    }\n\nconst cache = new Map<string, Promise<Gltf>>();\nconst preloaded = new Map<string, boolean>();\n\nexport class CachingGLTFLoader {\n  static get cache() {\n    return cache;\n  }\n  static clearCache() {\n    cache.clear();\n    preloaded.clear();\n  }\n\n  static has(url: string) {\n    return cache.has(url);\n  }\n\n  /**\n   * Returns true if the model that corresponds to the specified url is\n   * available in our local cache.\n   */\n  static hasFinishedLoading(url: string) {\n    return !!preloaded.get(url);\n  }\n\n  protected loader: GLTFLoader = new GLTFLoader();\n\n  /**\n   * Preloads a glTF, populating the cache. Returns a promise that resolves\n   * when the cache is populated.\n   */\n  async preload(url: string, progressCallback: ProgressCallback = () => {}) {\n    if (!cache.has(url)) {\n      cache.set(url, loadWithLoader(url, this.loader, (progress: number) => {\n                  progressCallback(progress * 0.9);\n                }));\n    }\n\n    await cache.get(url);\n\n    if (progressCallback) {\n      progressCallback(1.0);\n    }\n\n    preloaded.set(url, true);\n  }\n\n  /**\n   * Loads a glTF from the specified url and resolves a unique clone of the\n   * glTF. If the glTF has already been loaded, makes a clone of the cached\n   * copy.\n   */\n  async load(url: string, progressCallback: ProgressCallback = () => {}) {\n    await this.preload(url, progressCallback);\n\n    const gltf = cloneGltf(await cache.get(url)!);\n    const model = gltf.scene ? gltf.scene : null;\n\n    if (model != null) {\n      model.userData.animations = gltf.animations;  // save animations\n    }\n\n    return model;\n  }\n}\n"]}