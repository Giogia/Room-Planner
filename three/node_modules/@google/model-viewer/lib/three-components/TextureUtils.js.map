{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cache, DataTextureLoader, EventDispatcher, GammaEncoding, NearestFilter, RGBEEncoding, Texture, TextureLoader, WebGLRenderer, WebGLRenderTarget} from 'three';\nimport {PMREMCubeUVPacker} from 'three/examples/jsm/pmrem/PMREMCubeUVPacker.js';\nimport {PMREMGenerator} from 'three/examples/jsm/pmrem/PMREMGenerator.js';\nimport {EquirectangularToCubeGenerator} from '../third_party/three/EquirectangularToCubeGenerator.js';\nimport {RGBELoader} from '../third_party/three/RGBELoader.js';\nimport {Activity, ProgressTracker} from '../utilities/progress-tracker.js';\nimport EnvironmentMapGenerator from './EnvironmentMapGenerator.js';\n\n\n\nexport interface EnvironmentGenerationConfig {\n  pmrem?: boolean;\n  progressTracker?: ProgressTracker;\n}\n\n// Enable three's loader cache so we don't create redundant\n// Image objects to decode images fetched over the network.\nCache.enabled = true;\n\nconst HDR_FILE_RE = /\\.hdr$/;\nconst ldrLoader = new TextureLoader();\nconst hdrLoader = new RGBELoader();\n\nconst $cubeGenerator = Symbol('cubeGenerator');\n\nexport interface TextureUtilsConfig {\n  cubemapSize?: number;\n  pmremSamples?: number;\n}\n\nconst defaultConfig: TextureUtilsConfig = {\n  cubemapSize: 1024,\n};\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n  // 'Equirectangular', 'Cube', 'PMREM'\n  mapping: null,\n};\n\nexport default class TextureUtils extends EventDispatcher {\n  private config: TextureUtilsConfig;\n  private renderer: WebGLRenderer;\n  private environmentMapGenerator: EnvironmentMapGenerator;\n  private[$cubeGenerator]: EquirectangularToCubeGenerator|null = null;\n\n  /**\n   * @param {THREE.WebGLRenderer} renderer\n   * @param {?number} config.cubemapSize\n   */\n  constructor(renderer: WebGLRenderer, config: TextureUtilsConfig = {}) {\n    super();\n    this.config = {...defaultConfig, ...config};\n    this.renderer = renderer;\n    this.environmentMapGenerator = new EnvironmentMapGenerator(this.renderer);\n  }\n\n  /**\n   * @param {THREE.Texture} texture\n   * @return {THREE.WebGLRenderCubeTarget}\n   */\n  equirectangularToCubemap(texture: Texture) {\n    const generator = new EquirectangularToCubeGenerator(texture, {\n      resolution: this.config.cubemapSize,\n    });\n\n    generator.update(this.renderer);\n\n    (generator.renderTarget.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (texture as any).userData ? (texture as any).userData.url : null,\n        mapping: 'Cube',\n      })\n    };\n\n    // It's up to the previously served texture to dispose itself,\n    // and therefore the generator's render target.\n    this[$cubeGenerator] = generator;\n\n    return generator.renderTarget;\n  }\n\n  /**\n   * @param {string} url\n   * @param {Function} progressCallback\n   * @return {Promise<THREE.Texture>}\n   */\n  async load(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<Texture> {\n    try {\n      const isHDR: boolean = HDR_FILE_RE.test(url);\n      const loader: DataTextureLoader = isHDR ? hdrLoader : ldrLoader;\n      const texture: Texture = await new Promise<Texture>(\n          (resolve, reject) => loader.load(\n              url, resolve, (event: {loaded: number, total: number}) => {\n                progressCallback(event.loaded / event.total * 0.9);\n              }, reject));\n\n      progressCallback(1.0);\n\n      (texture as any).userData = {\n        ...userData,\n        ...({\n          url: url,\n          mapping: 'Equirectangular',\n        })\n      };\n\n      if (isHDR) {\n        texture.encoding = RGBEEncoding;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.flipY = true;\n      } else {\n        texture.encoding = GammaEncoding;\n      }\n\n      return texture;\n\n    } finally {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n    }\n  }\n\n  /**\n   * @param {string} url\n   * @param {Function} progressCallback\n   * @return {Promise<THREE.WebGLRenderCubeTarget>}\n   */\n  async loadEquirectAsCubeMap(\n      url: string, progressCallback: (progress: number) => void = () => {}) {\n    let equirect = null;\n\n    try {\n      equirect = await this.load(url, progressCallback);\n      return await this.equirectangularToCubemap(equirect);\n    } finally {\n      if (equirect != null) {\n        (equirect as any).dispose();\n      }\n    }\n  }\n\n  /**\n   * Returns a { skybox, environmentMap } object with the targets/textures\n   * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n   * is a Texture from a WebGLRenderCubeTarget.\n   *\n   * @see equirectangularToCubemap with regard to the THREE types.\n   * @param {string} url\n   * @param {boolean} config.pmrem\n   * @param {ProgressTracker} config.progressTracker\n   * @return {Promise<Object|null>}\n   */\n  async generateEnvironmentMapAndSkybox(\n      skyboxUrl: string|null = null, environmentMapUrl: string|null = null,\n      options: EnvironmentGenerationConfig = {}) {\n    const {progressTracker} = options;\n    let updateGenerationProgress: Activity|((...args: any[]) => void) =\n        () => {};\n\n    let skyboxLoads: Promise<WebGLRenderTarget|null> = Promise.resolve(null);\n    let environmentMapLoads: Promise<WebGLRenderTarget|null> =\n        Promise.resolve(null);\n\n    let skybox = null;\n    let environmentMap = null;\n\n    try {\n      let environmentMapWasGenerated = false;\n\n      // If we have a specific environment URL, attempt to load it as a cubemap\n      // The case for this is that the user intends for the IBL to be different\n      // from the scene background (which may be a skybox or solid color).\n      if (!!environmentMapUrl) {\n        environmentMapLoads = this.loadEquirectAsCubeMap(\n            environmentMapUrl,\n            progressTracker ? progressTracker.beginActivity() : () => {});\n      }\n\n      // If we have a skybox URL, attempt to load it as a cubemap\n      if (!!skyboxUrl) {\n        skyboxLoads = this.loadEquirectAsCubeMap(\n            skyboxUrl,\n            progressTracker ? progressTracker.beginActivity() : () => {});\n      }\n\n      updateGenerationProgress =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n\n      // In practice, this should be nearly as parallel as Promise.all (which\n      // we don't use since we can't easily destructure here):\n      environmentMap = await environmentMapLoads;\n      skybox = await skyboxLoads;\n\n      // If environment is still null, then no specific environment URL was\n      // specified\n      if (environmentMap != null) {\n        environmentMap = environmentMap.texture\n      } else {\n        if (skybox != null) {\n          // Infer the environment from the skybox if we have one:\n          environmentMap = skybox.texture;\n        } else {\n          // Otherwise, no skybox URL was specified, so fall back to generating\n          // the environment:\n          // TODO(#336): can cache this per renderer and color\n          environmentMap = this.environmentMapGenerator.generate();\n          environmentMapWasGenerated = true;\n        }\n      }\n\n      if (options.pmrem) {\n        // Apply the PMREM pass to the environment, which produces a distinct\n        // texture from the source:\n        const nonPmremEnvironmentMap = environmentMap;\n\n        environmentMap = this.pmremPass(nonPmremEnvironmentMap);\n\n        // If the source was generated, then we should dispose of it right away\n        if (environmentMapWasGenerated) {\n          nonPmremEnvironmentMap.dispose();\n        }\n      } else if (environmentMapWasGenerated) {\n        (environmentMap as any).userData = {\n          ...userData,\n          ...({\n            mapping: 'Cube',\n          })\n        };\n      }\n\n      return {environmentMap, skybox};\n    } catch (error) {\n      if (skybox != null) {\n        (skybox as any).dispose();\n      }\n\n      if (environmentMap != null) {\n        (environmentMap as any).dispose();\n      }\n\n      throw error;\n    } finally {\n      updateGenerationProgress(1.0);\n    }\n  }\n\n  /**\n   * Takes a cube-ish (@see equirectangularToCubemap) texture and\n   * returns a texture of the prefiltered mipmapped radiance environment map\n   * to be used as environment maps in models.\n   *\n   * @param {THREE.Texture} texture\n   * @param {number} samples\n   * @param {number} resolution\n   * @return {THREE.Texture}\n   */\n  pmremPass(texture: Texture, samples?: number, size?: number) {\n    const generator = new PMREMGenerator(texture, samples, size);\n    generator.update(this.renderer);\n\n    const packer = new PMREMCubeUVPacker(generator.cubeLods);\n    packer.update(this.renderer);\n\n    const renderTarget = packer.CubeUVRenderTarget;\n\n    generator.dispose();\n    packer.dispose();\n\n    (renderTarget.texture as any).userData = {\n      ...userData,\n      ...({\n        url: (texture as any).userData ? (texture as any).userData.url : null,\n        mapping: 'PMREM',\n      })\n    };\n\n    return renderTarget.texture;\n  }\n\n  dispose() {\n    // NOTE(cdata): In the case that the generators are invoked with\n    // an incorrect texture, the generators will throw when we attempt to\n    // dispose of them because the framebuffer has not been created yet but the\n    // implementation does not guard for this correctly:\n    try {\n      this.environmentMapGenerator.dispose();\n      (this as any).environmentMapGenerator = null;\n      if (this[$cubeGenerator] != null) {\n        this[$cubeGenerator]!.dispose();\n        this[$cubeGenerator] = null;\n      }\n    } catch (_error) {\n    }\n  }\n}\n"]}