{"version":3,"file":"conversions.js","sourceRoot":"","sources":["../src/conversions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Math as ThreeMath} from 'three';\nimport {parseValues, ValueNode} from './parsers.js';\n\n\n/**\n * Converts a length-like ValueNode to meters expressed as a number. Currently,\n * only ValueNodes that represent a metric value (m, cm, mm) are supported.\n *\n * If no unit is specified, assumes meters. Returns 0 for a ValueNode that\n * cannot be parsed.\n */\nconst lengthValueNodeToMeters = (lengthValueNode: ValueNode): number => {\n  const value = parseFloat(lengthValueNode.value as any);\n\n  if ((self as any).isNaN(value)) {\n    return 0;\n  }\n\n  let scale;\n\n  switch (lengthValueNode.unit) {\n    default:\n    case 'm':\n      scale = 1;\n      break;\n    case 'cm':\n      scale = 1 / 100;\n      break;\n    case 'mm':\n      scale = 1 / 1000;\n      break;\n  }\n\n  return value * scale;\n};\n\n/**\n * Converts an angle-like ValueNode to radians expressed as a number. Currently,\n * only ValueNodes that represent an angle expressed in degrees (deg) or radians\n * (rad) are supported.\n *\n * Assumes radians if unit is not specified or recognized. Returns 0 for a\n * ValueNode that cannot be parsed.\n */\nconst convertAngleValueNode =\n    (angleValueNode: ValueNode, desiredUnits: string = 'rad'): number => {\n      const value = parseFloat(angleValueNode.value as any);\n\n      if ((self as any).isNaN(value)) {\n        return 0;\n      }\n\n      const inputUnits = angleValueNode.unit;\n      return inputUnits === 'deg' ?\n          desiredUnits === 'deg' ? value : ThreeMath.degToRad(value) :\n          desiredUnits === 'deg' ? ThreeMath.radToDeg(value) : value;\n    };\n\n/**\n * Spherical String => Spherical Values\n *\n * Converts a \"spherical string\" to values suitable for assigning to a Three.js\n * Spherical object. Position strings are of the form \"$theta $phi $radius\".\n * Accepted units for theta and phi are radians (rad) and degrees (deg).\n * Accepted units for radius include meters (m), centimeters (cm) and\n * millimeters (mm), or auto. If radius is set to auto, it implies that the\n * consumer of the deserialized values has some idealized notion of the radius\n * that should be applied.\n *\n * Returns null if the spherical string cannot be parsed.\n */\nexport const deserializeSpherical =\n    (sphericalString: string): [number, number, number|string]|null => {\n      try {\n        const sphericalValueNodes = parseValues(sphericalString);\n\n        if (sphericalValueNodes.length === 3) {\n          const [thetaNode, phiNode, radiusNode] = sphericalValueNodes;\n\n          const theta = convertAngleValueNode(thetaNode);\n          const phi = convertAngleValueNode(phiNode);\n          const radius = radiusNode.value === 'auto' ?\n              'auto' :\n              lengthValueNodeToMeters(radiusNode);\n\n          return [theta, phi, radius];\n        }\n      } catch (_error) {\n      }\n\n      return null;\n    };\n\nexport const deserializeAngleToDeg = (angleString: string): number|null => {\n  try {\n    const angleValueNode = parseValues(angleString);\n\n    if (angleValueNode.length === 1) {\n      return convertAngleValueNode(angleValueNode[0], 'deg');\n    }\n  } catch (_error) {\n  }\n\n  return null;\n};\n\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\nexport const enumerationDeserializer = <T extends string>(allowedNames: T[]) =>\n    (valueString: string): Set<T> => {\n      try {\n        const names = parseValues(valueString)\n                          .map(valueNode => valueNode.value as T)\n                          .filter((name) => allowedNames.indexOf(name) > -1);\n        // NOTE(cdata): IE11 does not support constructing a Set directly from\n        // an iterable, so we need to manually add all the items:\n        const result = new Set<T>();\n        for (const name of names) {\n          result.add(name);\n        }\n        return result;\n      } catch (_error) {\n      }\n      return new Set();\n    };\n"]}