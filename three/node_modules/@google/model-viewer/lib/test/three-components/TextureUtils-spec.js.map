{"version":3,"file":"TextureUtils-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/TextureUtils-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture, WebGLRenderer, WebGLRenderTargetCube} from 'three';\n\nimport TextureUtils from '../../three-components/TextureUtils.js';\nimport {assetPath, textureMatchesMeta} from '../helpers.js';\n\n\n\nconst expect = chai.expect;\n\n// Reuse the same canvas as to not stress the WebGL\n// context limit\nconst canvas = document.createElement('canvas');\nconst EQUI_URL = assetPath('spruit_sunrise_2k.jpg');\nconst HDR_EQUI_URL = assetPath('spruit_sunrise_2k.hdr');\n\nsuite('TextureUtils', () => {\n  let textureUtils: TextureUtils;\n  let renderer: WebGLRenderer;\n\n  setup(() => {\n    renderer = new WebGLRenderer({canvas});\n    // NOTE(cdata): We need to lower the samples here or else tests that use\n    // PMREM have a tendency to time out on iOS Simulator\n    textureUtils = new TextureUtils(renderer, {pmremSamples: 4});\n  });\n  teardown(() => {\n    renderer.dispose();\n    textureUtils.dispose();\n  });\n\n  suite('load', () => {\n    test('loads a valid texture from URL', async () => {\n      let texture = await textureUtils.load(EQUI_URL);\n      texture.dispose();\n      expect((texture as any).isTexture).to.be.ok;\n      expect(textureMatchesMeta(\n                 texture, {mapping: 'Equirectangular', url: EQUI_URL}))\n          .to.be.ok;\n    });\n    test('loads a valid HDR texture from URL', async () => {\n      let texture = await textureUtils.load(HDR_EQUI_URL);\n      texture.dispose();\n      expect((texture as any).isTexture).to.be.ok;\n      expect(textureMatchesMeta(\n                 texture, {mapping: 'Equirectangular', url: HDR_EQUI_URL}))\n          .to.be.ok;\n    });\n    test('throws on invalid URL', async () => {\n      try {\n        await (textureUtils.load as any)(null);\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n    test('throws if texture not found', async () => {\n      try {\n        await textureUtils.load('./nope.png');\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n  });\n\n  suite('equirectangularToCubemap', () => {\n    test('creates a cubemap render target from texture', async () => {\n      const texture = await textureUtils.load(EQUI_URL);\n      const target = textureUtils.equirectangularToCubemap(texture);\n      texture.dispose();\n      target.dispose();\n      expect((target.texture as any).isTexture).to.be.ok;\n      expect(\n          textureMatchesMeta(target.texture, {mapping: 'Cube', url: EQUI_URL}))\n          .to.be.ok;\n    });\n    test('throws on invalid texture', async () => {\n      try {\n        await textureUtils.equirectangularToCubemap({} as Texture);\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n  });\n\n  suite('generating an environment map and skybox', () => {\n    let textures: {skybox: WebGLRenderTargetCube|null, environmentMap: Texture}|\n        null;\n    teardown(() => {\n      if (textures) {\n        textures.environmentMap.dispose();\n        textures.skybox!.dispose();\n        textures = null;\n      }\n    });\n\n    test('returns an environmentMap and skybox texture from url', async () => {\n      textures = await textureUtils.generateEnvironmentMapAndSkybox(EQUI_URL);\n      expect((textures.skybox!.texture as any).isTexture).to.be.ok;\n      expect((textures.environmentMap as any).isTexture).to.be.ok;\n\n      expect(textureMatchesMeta(\n                 textures.skybox!.texture, {mapping: 'Cube', url: EQUI_URL}))\n          .to.be.ok;\n\n      expect(textureMatchesMeta(\n                 textures.environmentMap, {mapping: 'Cube', url: EQUI_URL}))\n          .to.be.ok;\n    });\n\n    test(\n        'returns an environmentMap and skybox texture from an HDR url',\n        async () => {\n          textures =\n              await textureUtils.generateEnvironmentMapAndSkybox(HDR_EQUI_URL);\n          expect((textures.skybox!.texture as any).isTexture).to.be.ok;\n          expect((textures.environmentMap as any).isTexture).to.be.ok;\n\n          expect(textureMatchesMeta(textures.skybox!.texture, {\n            mapping: 'Cube',\n            url: HDR_EQUI_URL\n          })).to.be.ok;\n\n          expect(textureMatchesMeta(textures.environmentMap, {\n            mapping: 'Cube',\n            url: HDR_EQUI_URL\n          })).to.be.ok;\n        });\n\n    test(\n        'returns an environmentMap and skybox texture from url with PMREM',\n        async () => {\n          textures = await textureUtils.generateEnvironmentMapAndSkybox(\n              EQUI_URL, null, {\n                pmrem: true,\n              });\n\n          expect((textures.skybox!.texture as any).isTexture).to.be.ok;\n          expect((textures.environmentMap as any).isTexture).to.be.ok;\n\n          expect(textureMatchesMeta(textures.skybox!.texture, {\n            mapping: 'Cube',\n            url: EQUI_URL\n          })).to.be.ok;\n\n          expect(textureMatchesMeta(textures.environmentMap, {\n            mapping: 'PMREM',\n            url: EQUI_URL\n          })).to.be.ok;\n        });\n\n    test(\n        'returns an environmentMap and skybox texture from an HDR url',\n        async () => {\n          textures = await textureUtils.generateEnvironmentMapAndSkybox(\n              HDR_EQUI_URL, null, {\n                pmrem: true,\n              });\n          expect((textures.skybox!.texture as any).isTexture).to.be.ok;\n          expect((textures.environmentMap as any).isTexture).to.be.ok;\n\n          expect(textureMatchesMeta(textures.skybox!.texture, {\n            mapping: 'Cube',\n            url: HDR_EQUI_URL\n          })).to.be.ok;\n\n          expect(textureMatchesMeta(textures.environmentMap, {\n            mapping: 'PMREM',\n            url: HDR_EQUI_URL\n          })).to.be.ok;\n        });\n\n    test('throws if given an invalid url', async () => {\n      try {\n        await textureUtils.generateEnvironmentMapAndSkybox({} as string);\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n  });\n\n  suite('dynamically generating environment maps', () => {\n    test('creates a cubemap render target', async () => {\n      const {environmentMap: texture} =\n          await textureUtils.generateEnvironmentMapAndSkybox();\n\n      expect(textureMatchesMeta(texture, {mapping: 'Cube', url: null}))\n          .to.be.ok;\n    });\n\n    test('creates a cubemap render target with PMREM', async () => {\n      const {environmentMap: texture} =\n          await textureUtils.generateEnvironmentMapAndSkybox(null, null, {\n            pmrem: true,\n          });\n\n      expect(textureMatchesMeta(texture, {mapping: 'PMREM', url: null}))\n          .to.be.ok;\n    });\n  });\n});\n"]}