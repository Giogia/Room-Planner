{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../src/features/environment.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\nimport {Color, Texture} from 'three';\nimport ModelViewerElementBase, {$container, $needsRender, $onModelLoad, $progressTracker, $renderer, $scene} from '../model-viewer-base.js';\nimport {IlluminationRole} from '../three-components/ModelScene.js';\nimport {Constructor, deserializeUrl} from '../utilities.js';\n\nexport interface EnvironmentInterface {\n  environmentImage: string|null;\n  environmentIntensity: number;\n  backgroundImage: string|null;\n  backgroundColor: string;\n  experimentalPmrem: boolean;\n  shadowIntensity: number;\n  stageLightIntensity: number;\n  exposure: number;\n}\n\nconst DEFAULT_BACKGROUND_COLOR = '#ffffff';\nconst DEFAULT_SHADOW_INTENSITY = 0.0;\nconst DEFAULT_EXPOSURE = 1.0;\nconst DEFAULT_STAGE_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ENVIRONMENT_INTENSITY = 1.0;\n\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $applyEnvironmentMap = Symbol('applyEnvironmentMap');\nconst $deallocateTextures = Symbol('deallocateTextures');\nconst $updateLighting = Symbol('updateLighting');\nconst $updateToneMapping = Symbol('updateToneMapping');\nconst $updateShadow = Symbol('updateShadow');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\n\nexport const EnvironmentMixin = (ModelViewerElement:\n                                     Constructor<ModelViewerElementBase>):\n    Constructor<ModelViewerElementBase&EnvironmentInterface> => {\n      class EnvironmentModelViewerElement extends ModelViewerElement {\n        @property({\n          type: String,\n          attribute: 'environment-image',\n          converter: {fromAttribute: deserializeUrl}\n        })\n        environmentImage: string|null = null;\n\n        @property({type: Number, attribute: 'environment-intensity'})\n        environmentIntensity: number = DEFAULT_ENVIRONMENT_INTENSITY;\n\n        @property({\n          type: String,\n          attribute: 'background-image',\n          converter: {fromAttribute: deserializeUrl}\n        })\n        backgroundImage: string|null = null;\n\n        @property({type: String, attribute: 'background-color'})\n        backgroundColor: string = DEFAULT_BACKGROUND_COLOR;\n\n        @property({type: Boolean, attribute: 'experimental-pmrem'})\n        experimentalPmrem: boolean = false;\n\n        @property({type: Number, attribute: 'shadow-intensity'})\n        shadowIntensity: number = DEFAULT_SHADOW_INTENSITY;\n\n        @property({type: Number, attribute: 'stage-light-intensity'})\n        stageLightIntensity: number = DEFAULT_STAGE_LIGHT_INTENSITY;\n\n        @property({\n          type: Number,\n        })\n        exposure: number = DEFAULT_EXPOSURE;\n\n        private[$currentEnvironmentMap]: Texture|null = null;\n\n        private[$cancelEnvironmentUpdate]:\n            ((...args: any[]) => any)|null = null;\n\n        updated(changedProperties: Map<string, any>) {\n          super.updated(changedProperties);\n\n          if (changedProperties.has('shadowIntensity')) {\n            this[$updateShadow]();\n          }\n\n          if (changedProperties.has('exposure')) {\n            this[$updateToneMapping]();\n          }\n\n          if (changedProperties.has('environmentIntensity') ||\n              changedProperties.has('stageLightIntensity')) {\n            this[$updateLighting]();\n          }\n\n          if (changedProperties.has('environmentImage') ||\n              changedProperties.has('backgroundImage') ||\n              changedProperties.has('backgroundColor') ||\n              changedProperties.has('experimentalPmrem')) {\n            this[$updateEnvironment]();\n          }\n        }\n\n        firstUpdated(changedProperties: Map<string, any>) {\n          super.firstUpdated && super.firstUpdated(changedProperties);\n          // In case no environment-related properties were confiured, we should\n          // make sure that the environment is updated at least once:\n          if (this[$cancelEnvironmentUpdate] == null) {\n            this[$updateEnvironment]();\n          }\n        }\n\n        [$onModelLoad](event: any) {\n          super[$onModelLoad](event);\n\n          if (this[$currentEnvironmentMap] != null) {\n            this[$applyEnvironmentMap](this[$currentEnvironmentMap]!);\n          }\n        }\n\n        async[$updateEnvironment]() {\n          const {backgroundImage, environmentImage, experimentalPmrem: pmrem} =\n              this;\n          let {backgroundColor} = this;\n\n          if (this[$cancelEnvironmentUpdate] != null) {\n            this[$cancelEnvironmentUpdate]!();\n            this[$cancelEnvironmentUpdate] = null;\n          }\n\n          const {textureUtils} = this[$renderer];\n\n          if (textureUtils == null) {\n            return;\n          }\n\n          try {\n            const {environmentMap,\n                   skybox} = await new Promise(async (resolve, reject) => {\n              const texturesLoad = textureUtils.generateEnvironmentMapAndSkybox(\n                  backgroundImage,\n                  environmentImage,\n                  {pmrem, progressTracker: this[$progressTracker]});\n              this[$cancelEnvironmentUpdate] = () => reject(texturesLoad);\n              resolve(await texturesLoad);\n            });\n\n            this[$deallocateTextures]();\n\n            if (skybox != null) {\n              this[$scene].background = skybox;\n            } else {\n              if (!backgroundColor) {\n                backgroundColor = DEFAULT_BACKGROUND_COLOR;\n              }\n\n              const parsedColor = new Color(backgroundColor);\n              this[$scene].background = parsedColor;\n              // Set the container node's background color so that it matches\n              // the background color configured for the scene. It's important\n              // to do this because we round the size of the canvas off to the\n              // nearest pixel, so it is possible (indeed likely) that there is\n              // a marginal gap around one or two edges of the canvas.\n              this[$container].style.backgroundColor = backgroundColor;\n            }\n\n            this[$applyEnvironmentMap](environmentMap);\n          } catch (errorOrPromise) {\n            if (errorOrPromise instanceof Error) {\n              this[$applyEnvironmentMap](null);\n              throw errorOrPromise;\n            }\n\n            const {environmentMap, skybox} = await errorOrPromise;\n\n            if (environmentMap != null) {\n              environmentMap.dispose();\n            }\n\n            if (skybox != null) {\n              skybox.dispose();\n            }\n          }\n        }\n\n        /**\n         * Sets the Model to use the provided environment map,\n         * or `null` if the Model should remove its' environment map.\n         *\n         * @param {THREE.Texture} environmentMap\n         */\n        private[$applyEnvironmentMap](environmentMap: Texture|null) {\n          this[$currentEnvironmentMap] = environmentMap;\n          this[$scene].model.applyEnvironmentMap(this[$currentEnvironmentMap]);\n          this.dispatchEvent(new CustomEvent('environment-change'));\n\n          this[$updateLighting]();\n          this[$needsRender]();\n        }\n\n        private[$updateShadow]() {\n          this[$scene].shadow.intensity = this.shadowIntensity;\n          this[$needsRender]();\n        }\n\n        private[$updateToneMapping]() {\n          this[$scene].exposure = this.exposure;\n          this[$needsRender]();\n        }\n\n        private[$updateLighting]() {\n          const scene = this[$scene];\n          const illuminationRole = this.experimentalPmrem ?\n              IlluminationRole.Secondary :\n              IlluminationRole.Primary;\n          const environmentIntensity = this.experimentalPmrem ?\n              this.environmentIntensity * 0.65 :\n              this.environmentIntensity;\n\n          scene.configureStageLighting(\n              this.stageLightIntensity, illuminationRole);\n          scene.model.setEnvironmentMapIntensity(environmentIntensity);\n        }\n\n        private[$deallocateTextures]() {\n          const background = this[$scene].background;\n          if (background && (background as Texture).dispose) {\n            (background as Texture).dispose();\n          }\n          if (this[$currentEnvironmentMap]) {\n            this[$currentEnvironmentMap]!.dispose();\n            this[$currentEnvironmentMap] = null;\n          }\n        }\n      }\n\n      return EnvironmentModelViewerElement;\n    };\n"]}