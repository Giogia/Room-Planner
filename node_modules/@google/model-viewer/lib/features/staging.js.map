{"version":3,"file":"staging.js","sourceRoot":"","sources":["../../src/features/staging.ts"],"names":[],"mappings":"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","sourcesContent":["\n/*\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\n\nimport ModelViewerElementBase, {$needsRender, $scene, $tick, $onUserModelOrbit} from '../model-viewer-base.js';\nimport {Constructor, Timer} from '../utilities.js';\n\nconst Alignment = {\n  CENTER: 'center',\n  ORIGIN: 'origin'\n};\n\n// How much the model will rotate per\n// second in radians:\nconst ROTATION_SPEED = Math.PI / 32;\nconst AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION = 3000;\n\nconst UNBOUNDED_WHITESPACE_RE = /\\s+/;\n\nconst alignmentToMaskValues = (alignmentString: string) => {\n  const alignments = alignmentString.split(UNBOUNDED_WHITESPACE_RE);\n  const maskValues = [];\n  let firstAlignment;\n\n  for (let i = 0; i < 3; ++i) {\n    const alignment = alignments[i];\n\n    if (alignment != null && firstAlignment == null) {\n      firstAlignment = alignment;\n    }\n\n    switch (alignment || firstAlignment) {\n      default:\n      case Alignment.CENTER:\n        maskValues.push(1.0);\n        break;\n      case Alignment.ORIGIN:\n        maskValues.push(0.0);\n        break;\n    }\n  }\n\n  return maskValues;\n};\n\nconst $autoRotateTimer = Symbol('autoRotateTimer');\nconst $updateAlignment = Symbol('updateAlignment');\n\nexport {\n  AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION\n};\n\nexport const StagingMixin = (ModelViewerElement:\n                                 Constructor<ModelViewerElementBase>):\n    Constructor<ModelViewerElementBase> => {\n      class StagingModelViewerElement extends ModelViewerElement {\n        @property({type: Boolean, attribute: 'auto-rotate'})\n        autoRotate: boolean = false;\n\n        @property({type: String, attribute: 'align-model'})\n        alignModel: string = 'center';\n\n        private [$autoRotateTimer]: Timer;\n\n        constructor() {\n          super();\n\n          this[$autoRotateTimer] = new Timer(AUTO_ROTATE_DELAY_AFTER_USER_INTERACTION);\n        }\n\n        connectedCallback() {\n          super.connectedCallback();\n          this[$autoRotateTimer].stop();\n        }\n\n        disconnectedCallback() {\n          super.disconnectedCallback();\n          this[$autoRotateTimer].stop();\n        }\n\n        updated(changedProperties: Map<string, any>) {\n          super.updated(changedProperties);\n\n          if (changedProperties.has('alignModel')) {\n            this[$updateAlignment]();\n          }\n\n          if (changedProperties.has('autoRotate')) {\n            (this as any)[$scene].pivot.rotation.set(0, 0, 0);\n            this[$needsRender]();\n          }\n        }\n\n        [$tick](time: number, delta: number) {\n          super[$tick](time, delta);\n\n          if (!this.autoRotate || !this.modelIsVisible) {\n            return;\n          }\n\n          this[$autoRotateTimer].tick(delta);\n\n          if (this[$autoRotateTimer].hasStopped) {\n            (this as any)[$scene].pivot.rotation.y += ROTATION_SPEED * delta * 0.001;\n            this[$needsRender]();\n          }\n        }\n\n        [$onUserModelOrbit]() {\n          super[$onUserModelOrbit]();\n\n          if (!this.autoRotate) {\n            return;\n          }\n\n          this[$autoRotateTimer].reset();\n        }\n\n        [$updateAlignment]() {\n          const {alignModel} = this;\n          const alignmentMaskValues = alignmentToMaskValues(alignModel);\n\n          (this as any)[$scene].setModelAlignmentMask(...alignmentMaskValues);\n        }\n\n        get turntableRotation(): number {\n          return (this as any)[$scene].pivot.rotation.y;\n        }\n      }\n\n      return StagingModelViewerElement;\n    };\n"]}