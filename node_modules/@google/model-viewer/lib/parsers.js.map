{"version":3,"file":"parsers.js","sourceRoot":"","sources":["../src/parsers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAQH;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,YAAoB,EAAoB,EAAE;IACpE,OAAO,eAAe,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SACtC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,GAAG,EAAE;IAC7B,MAAM,iBAAiB,GACnB,4DAA4D,CAAC;IAEjE,OAAO,CAAC,WAAmB,EAAa,EAAE;QACxC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QACzD,OAAO,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAC,CAAC;IAClE,CAAC,CAAC;AACJ,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,eAAe,GAAG,CAAC,GAAG,EAAE;IAC5B,MAAM,aAAa,GAAG,MAAM,CAAC;IAE7B,OAAO,CAAC,WAAmB,EAAE,EAAE;QAC7B,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,EAAE,CAAC;SACX;QAED,OAAO,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC,CAAC;AACJ,CAAC,CAAC,EAAE,CAAC","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ValueNode {\n  type: 'value';\n  value: string|number|null;\n  unit: string|null;\n}\n\n/**\n * Parses input strings that are a series of whitespace-separated CSS-like value\n * expressions. Expressions in such strings include values such as:\n *\n *  - A color e.g., red or #8800ff\n *  - A named orientation e.g., center\n *  - A length e.g., 25px or 1m\n *\n * Some example value strings:\n *\n *  - 0 10px 100px\n *  - red green 100%\n *  - 180deg 3rad\n *  - 1em\n *\n * NOTE(cdata): CSS function values currently not supported, so no rgb(...) etc.\n */\nexport const parseValues = (valuesString: string): Array<ValueNode> => {\n  return whitespaceSplit(valuesString.trim())\n      .map(valueString => parseAtomicValue(valueString));\n};\n\nconst parseAtomicValue = (() => {\n  const VALUE_AND_UNIT_RE =\n      /^((?:(?:#|[a-zA-Z])[a-zA-Z\\d]*)|(?:-?[\\d.]+))([a-zA-Z%]*)$/;\n\n  return (valueString: string): ValueNode => {\n    const match = valueString.match(VALUE_AND_UNIT_RE) || [];\n    return {type: 'value', value: match[1], unit: match[2] || null};\n  };\n})();\n\nconst whitespaceSplit = (() => {\n  const WHITESPACE_RE = /\\s+/g;\n\n  return (inputString: string) => {\n    if (!inputString) {\n      return [];\n    }\n\n    return inputString.split(WHITESPACE_RE);\n  };\n})();\n"]}