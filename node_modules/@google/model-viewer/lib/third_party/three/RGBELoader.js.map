{"version":3,"file":"RGBELoader.js","sourceRoot":"","sources":["../../../src/third_party/three/RGBELoader.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\nimport * as ThreeModule from 'three';\n\nconst THREE = {...ThreeModule};\n\nexport const RGBELoader = THREE.HDRLoader = THREE.RGBELoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.type = THREE.UnsignedByteType;\n\n};\n\nexport const HDRLoader = RGBELoader;\n\n// extend THREE.DataTextureLoader\nTHREE.RGBELoader.prototype = Object.create( THREE.DataTextureLoader.prototype );\n\n// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\nTHREE.RGBELoader.prototype._parser = function ( buffer ) {\n\n\tvar\n\t\t/* return codes for rgbe routines */\n\t\tRGBE_RETURN_SUCCESS = 0,\n\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t/* default error routine.  change this to change error handling */\n\t\trgbe_read_error = 1,\n\t\trgbe_write_error = 2,\n\t\trgbe_format_error = 3,\n\t\trgbe_memory_error = 4,\n\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\tcase rgbe_read_error: console.error( \"THREE.RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\tbreak;\n\t\t\t\tcase rgbe_write_error: console.error( \"THREE.RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\tbreak;\n\t\t\t\tcase rgbe_format_error: console.error( \"THREE.RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tcase rgbe_memory_error: console.error( \"THREE.RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t}\n\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t},\n\n\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\tRGBE_DATA_RED = 0,\n\t\tRGBE_DATA_GREEN = 1,\n\t\tRGBE_DATA_BLUE = 2,\n\n\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\tRGBE_DATA_SIZE = 4,\n\n\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\tRGBE_VALID_FORMAT = 2,\n\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\tNEWLINE = \"\\n\",\n\n\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\tvar p = buffer.pos,\n\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t;\n\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\tp += chunkSize;\n\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t}\n\n\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t}*/\n\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t}\n\t\t\treturn false;\n\n\t\t},\n\n\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\tvar line, match,\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t// RGBE format header struct\n\t\t\t\theader = {\n\n\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t};\n\n\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t}\n\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t}\n\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\theader.programtype = match[ 1 ];\n\t\t\theader.string += line + \"\\n\";\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tline = fgets( buffer );\n\t\t\t\tif ( false === line ) break;\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t}\n\n\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t}\n\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t}\n\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t}\n\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t}\n\n\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t}\n\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t}\n\n\t\t\treturn header;\n\n\t\t},\n\n\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t;\n\n\t\t\tif (\n\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t// this file is not run length encoded\n\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t) {\n\n\t\t\t\t// return the flat buffer\n\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t}\n\n\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t}\n\n\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t}\n\n\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t// read in each successive scanline\n\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t}\n\n\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t}\n\n\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\tptr = 0;\n\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\toff = 0;\n\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t}\n\n\t\t\t\tnum_scanlines --;\n\n\t\t\t}\n\n\t\t\treturn data_rgba;\n\n\t\t}\n\t;\n\n\tvar byteArray = new Uint8Array( buffer ),\n\t\tbyteLength = byteArray.byteLength;\n\tbyteArray.pos = 0;\n\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\tvar w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h )\n\t\t;\n\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\tif ( this.type === THREE.UnsignedByteType ) {\n\n\t\t\t\tvar data = image_rgba_data;\n\t\t\t\tvar format = THREE.RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\tvar type = THREE.UnsignedByteType;\n\n\t\t\t} else if ( this.type === THREE.FloatType ) {\n\n\t\t\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t\t\t};\n\n\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t}\n\n\t\t\t\tvar data = floatArray;\n\t\t\t\tvar format = THREE.RGBFormat;\n\t\t\t\tvar type = THREE.FloatType;\n\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\twidth: w, height: h,\n\t\t\t\tdata: data,\n\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\tformat: format,\n\t\t\t\ttype: type\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\nTHREE.RGBELoader.prototype.setType = function ( value ) {\n\n\tthis.type = value;\n\treturn this;\n\n};\n\n\n"]}