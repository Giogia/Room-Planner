{"version":3,"file":"EquirectangularToCubeGenerator.js","sourceRoot":"","sources":["../../../src/third_party/three/EquirectangularToCubeGenerator.js"],"names":[],"mappings":"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","sourcesContent":["/**\n* @author Richard M. / https://github.com/richardmonette\n* @author WestLangley / http://github.com/WestLangley\n*/\n\nimport * as ThreeModule from 'three';\n\nconst THREE = {...ThreeModule};\n\nexport const CubemapGenerator = THREE.CubemapGenerator = function ( renderer ) {\n\n\tthis.renderer = renderer;\n\n};\n\nTHREE.CubemapGenerator.prototype.fromEquirectangular = function ( texture, options ) {\n\n\toptions = options || {};\n\n\tvar scene = new THREE.Scene();\n\n\tvar shader = {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader:\n\n\t\t\t`\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <project_vertex>\n\n\t\t\t}\n\t\t\t`,\n\n\t\tfragmentShader:\n\n\t\t\t`\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\t#define RECIPROCAL_PI 0.31830988618\n\t\t\t#define RECIPROCAL_PI2 0.15915494\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV;\n\n\t\t\t\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\t\t\t\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t\t`\n\t};\n\n\tvar material = new THREE.ShaderMaterial( {\n\n\t\ttype: 'CubemapFromEquirect',\n\n\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\tvertexShader: shader.vertexShader,\n\t\tfragmentShader: shader.fragmentShader,\n\t\tside: THREE.BackSide,\n\t\tblending: THREE.NoBlending\n\n\t} );\n\n\tmaterial.uniforms.tEquirect.value = texture;\n\n\tvar mesh = new THREE.Mesh( new THREE.BoxBufferGeometry( 5, 5, 5 ), material );\n\n\tscene.add( mesh );\n\n\tvar resolution = options.resolution || 512;\n\n\tvar params = {\n\t\ttype: texture.type,\n\t\tformat: texture.format,\n\t\tencoding: texture.encoding,\n\t\tgenerateMipmaps: ( options.generateMipmaps !== undefined ) ? options.generateMipmaps : texture.generateMipmaps,\n\t\tminFilter: ( options.minFilter !== undefined ) ? options.minFilter : texture.minFilter,\n\t\tmagFilter: ( options.magFilter !== undefined ) ? options.magFilter : texture.magFilter\n\t};\n\n\tvar camera = new THREE.CubeCamera( 1, 10, resolution, params );\n\n\tcamera.update( this.renderer, scene );\n\n\tmesh.geometry.dispose();\n\tmesh.material.dispose();\n\n\treturn camera.renderTarget;\n\n};\n\n//\n\nexport const EquirectangularToCubeGenerator = THREE.EquirectangularToCubeGenerator = ( function () {\n\n\tvar camera = new THREE.PerspectiveCamera( 90, 1, 0.1, 10 );\n\tvar scene = new THREE.Scene();\n\tvar boxMesh = new THREE.Mesh( new THREE.BoxBufferGeometry( 1, 1, 1 ), getShader() );\n\tboxMesh.material.side = THREE.BackSide;\n\tscene.add( boxMesh );\n\n\tvar EquirectangularToCubeGenerator = function ( sourceTexture, options ) {\n\n\t\toptions = options || {};\n\n\t\tthis.sourceTexture = sourceTexture;\n\t\tthis.resolution = options.resolution || 512;\n\n\t\tthis.views = [\n\t\t\t{ t: [ 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ - 1, 0, 0 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ 0, 1, 0 ], u: [ 0, 0, 1 ] },\n\t\t\t{ t: [ 0, - 1, 0 ], u: [ 0, 0, - 1 ] },\n\t\t\t{ t: [ 0, 0, 1 ], u: [ 0, - 1, 0 ] },\n\t\t\t{ t: [ 0, 0, - 1 ], u: [ 0, - 1, 0 ] },\n\t\t];\n\n\t\tvar params = {\n\t\t\tformat: options.format || this.sourceTexture.format,\n\t\t\tmagFilter: this.sourceTexture.magFilter,\n\t\t\tminFilter: this.sourceTexture.minFilter,\n\t\t\ttype: options.type || this.sourceTexture.type,\n\t\t\tgenerateMipmaps: this.sourceTexture.generateMipmaps,\n\t\t\tanisotropy: this.sourceTexture.anisotropy,\n\t\t\tencoding: this.sourceTexture.encoding\n\t\t};\n\n\t\tthis.renderTarget = new THREE.WebGLRenderTargetCube( this.resolution, this.resolution, params );\n\n\t};\n\n\tEquirectangularToCubeGenerator.prototype = {\n\n\t\tconstructor: EquirectangularToCubeGenerator,\n\n\t\tupdate: function ( renderer ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tboxMesh.material.uniforms.equirectangularMap.value = this.sourceTexture;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar v = this.views[ i ];\n\n\t\t\t\tcamera.position.set( 0, 0, 0 );\n\t\t\t\tcamera.up.set( v.u[ 0 ], v.u[ 1 ], v.u[ 2 ] );\n\t\t\t\tcamera.lookAt( v.t[ 0 ], v.t[ 1 ], v.t[ 2 ] );\n\n\t\t\t\trenderer.setRenderTarget( this.renderTarget, i );\n\t\t\t\trenderer.clear();\n\t\t\t\trenderer.render( scene, camera );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\treturn this.renderTarget.texture;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.renderTarget.dispose();\n\n\t\t}\n\n\t};\n\n\tfunction getShader() {\n\n\t\tvar shaderMaterial = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t\"equirectangularMap\": { value: null },\n\t\t\t},\n\n\t\t\tvertexShader:\n        \"varying vec3 localPosition;\\n\\\n        \\n\\\n        void main() {\\n\\\n          localPosition = position;\\n\\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n        }\",\n\n\t\t\tfragmentShader:\n        \"#include <common>\\n\\\n        varying vec3 localPosition;\\n\\\n        uniform sampler2D equirectangularMap;\\n\\\n        \\n\\\n        vec2 EquirectangularSampleUV(vec3 v) {\\n\\\n          vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\\n\\\n          uv *= vec2(0.1591, 0.3183); // inverse atan\\n\\\n          uv += 0.5;\\n\\\n          return uv;\\n\\\n        }\\n\\\n        \\n\\\n        void main() {\\n\\\n          vec2 uv = EquirectangularSampleUV(normalize(localPosition));\\n\\\n          gl_FragColor = texture2D(equirectangularMap, uv);\\n\\\n        }\",\n\n\t\t\tblending: THREE.NoBlending\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeGenerator';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\treturn EquirectangularToCubeGenerator;\n\n} )();\n"]}